// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  --------------------------------------------------------------------------

model Admin {
  adminId     Int    @id @default(autoincrement())
  name        String
  email       String
  password    String
  phoneNumber String

  order Order[]
}

model Authorization {
  authId      String    @id
  tokenId     String
  sessionToken String

  requester Requester?
  walker    Walker?
}

model Walker {
  walkerId        Int    @id @default(autoincrement())
  username        String
  email           String
  phoneNumber     String
  profilePicture  String
  bankAccountName String
  bankAccountNo   String

  auth   Authorization @relation(fields: [authId], references: [authId])
  authId          String           @unique
  order Order[]
}

model Requester {
  requesterId    Int    @id @default(autoincrement())
  username       String
  email          String
  firstName      String
  lastName       String
  phoneNumber    String
  profilePicture String

  auth   Authorization @relation(fields: [authId], references: [authId])
  authId         String    @unique
  address Address @relation(fields: [addressId], references: [addressId])
  addressId      Int    @unique
  order Order[]
  review  Review[]
  debitCard    DebitCard[]
}

model DebitCard {
  debitCardId Int @id @default(autoincrement())
  cardNumber  String
  expiryDate  String
  cvv String

  requester Requester @relation(fields: [requesterId], references: [requesterId])
  requesterId Int
}

model Address {
  addressId Int    @id @default(autoincrement())
  note      String
  latitude  Float
  longitude Float

  requester Requester?
  canteen Canteen?
  order Order?
}

model Order {
  orderId       Int      @id @default(autoincrement())
  orderDate     DateTime
  orderStatus   String
  amount    Float

  admin Admin @relation(fields: [adminId], references: [adminId])
  adminId     Int
  address Address @relation(fields: [addressId], references: [addressId])
  addressId     Int @unique
  requester Requester @relation(fields: [requesterId], references: [requesterId])
  requesterId   Int
  walker  Walker  @relation(fields: [walkerId], references: [walkerId])
  walkerId      Int
  canteen Canteen @relation(fields: [canteenId], references: [canteenId])
  canteenId     Int
  transaction Transaction @relation(fields: [transactionId], references: [transactionId])
  transactionId Int @unique
  orderItem OrderItem[]
}

model Transaction{
  transactionId Int @id @default(autoincrement())
  type String
  date  DateTime
  status  String
  amount  Float

  order Order?
}

model Canteen {
  canteenId Int    @id @default(autoincrement())
  name      String

  address Address @relation(fields: [addressId], references: [addressId])
  addressId Int @unique
  order Order[]
  shop  Shop[]
}

model Shop {
  shopId    Int    @id @default(autoincrement())
  username      String
  password  String
  shopName  String
  profilePicture  String
  tel   String
  shopNumber  String
  status    Boolean

  review  Review[]
  menu  Menu[]
  canteen Canteen @relation(fields: [canteenId],  references: [canteenId])
  canteenId Int
  schedule  Schedule[]
}

model Schedule{
  scheduleId  Int @id @default(autoincrement())
  dayOfWeek String
  startTime DateTime
  endTime DateTime
  status Boolean

  shop  Shop  @relation(fields: [shopId], references: [shopId])
  shopId  Int
}

model Review{
  reviewId  Int @id  @default(autoincrement())
  rating  Float
  comment String

  shop  Shop  @relation(fields: [shopId], references: [shopId])
  shopId  Int
  requester Requester @relation(fields: [requesterId], references: [requesterId])
  requesterId Int
}

model Menu {
  menuId      Int    @id @default(autoincrement())
  name        String
  price       Float
  picture     String
  description String
  status      Boolean

  shop  Shop  @relation(fields: [shopId], references: [shopId])
  shopId  Int
  option  Option[]
  orderItem OrderItem[]
}

model Option{
  optionId Int @id @default(autoincrement())
  name String
  mustChoose Boolean
  maxChoose Int
  minChoose Int

  menu  Menu  @relation(fields: [menuId], references: [menuId])
  menuId  Int
  optionItem OptionItem[]
}

model OptionItem{
  optionItemId Int @id @default(autoincrement())
  name String
  price Float

  option Option @relation(fields: [optionId], references: [optionId])
  optionId Int
  orderItemExtra  OrderItemExtra[]
}

model OrderItem {
  orderItemId         Int    @id @default(autoincrement())
  quantity            Int
  specialInstructions String

  order Order @relation(fields: [orderId], references: [orderId])
  orderId             Int
  orderItemExtra  OrderItemExtra[]
  menu  Menu  @relation(fields: [menuId], references: [menuId])
  menuId  Int
}

model OrderItemExtra{
  OrderItemExtraId Int @id @default(autoincrement())
  selected Boolean

  orderItem OrderItem @relation(fields: [orderItemId], references: [orderItemId])
  orderItemId Int
  optionItem OptionItem @relation(fields: [optionItemId], references: [optionItemId])
  optionItemId Int
}