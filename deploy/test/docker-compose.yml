version: '3.8'
x-node-common:
  &node-base
  depends_on:
    kafka:
      condition: service_healthy
  networks:
    - internal_network
  restart: on-failure
# -----------------------------------------------
x-db-common:
  &db-base
  image: postgres
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
  networks:
    - internal_network
# -----------------------------------------------
networks:
  internal_network:
    driver: bridge
# -----------------------------------------------
# -----------------------------------------------

services:
# -----------------------------------------------
  micro-account:
    <<: *node-base
    build:
      context: ../../services/account
      dockerfile: ../../deploy/test/Dockerfile
    volumes:
      - ../../services/account/src:/usr/app/src
    entrypoint: ["npm", "run", "start:dev"]

  db-account:
    <<: *db-base
    volumes:
      - ../../services/account/db:/var/lib/postgresql/data
  
# -----------------------------------------------
  api_gateway:
    <<: *node-base
    build:
      context: ../../gateway
      dockerfile: ../deploy/test/Dockerfile
    volumes:
      - ../../gateway/src:/usr/app/src
    ports:
      - "3000:3000"
    entrypoint: [ "npm", "run", "start:dev"]
    
# -----------------------------------------------
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - internal_network
  kafka:
    image: 'bitnami/kafka:latest'
    restart: "no"
    ports:
      - "9093:9093"
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - internal_network
    healthcheck:
      test: ["CMD-SHELL", "curl -v kafka:9092 2>&1 | grep 'Empty reply from server'"]
      interval: 10s
      timeout: 10s
      retries: 100
      start_period: 30s